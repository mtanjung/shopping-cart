{"version":3,"sources":["api/api.js","context/CartContext.js","components/buttons/QuantityButton.js","components/Item.js","views/Cart.js","views/Home.js","views/Error.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","Context","createContext","Provider","props","initialcart","cart","children","summary","useState","setCart","isFirstRun","useRef","useEffect","console","log","current","getBackendCart","updateBackendCart","useMemo","item","subtotal","estimated_total","tax","shipping","quantity","price","API","get","then","data","length","error","post","cartContext","addToCart","cart_array_key","findIndex","x","product_id","id","newItem","product_title","title","concat","updateCart","deleteFromCart","splice","value","Consumer","defaultProps","Array","from","_","i","map","key","text","QuantityButton","onChange","Dropdown","placeholder","selection","options","e","Item","product","useContext","CartContext","setQuantity","Card","raised","style","margin","Content","Image","src","size","wrapped","ui","Header","Description","extra","Button","color","onClick","Cart","handleQuantityChange","new_quantity","Container","Segment","Fragment","List","divided","verticalAlign","index","floated","avatar","Divider","disabled","Home","products","setProducts","className","display","Error","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d38a3c28.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n  baseURL: `http://localhost/api/`\n});","import React, { createContext, useState, useEffect, useMemo, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport API from '../api/api';\n\nexport const Context = createContext({});\n\nexport const Provider = props => {\n  // Initial values are obtained from the props\n  const {\n    cart: initialcart,\n    summary: initialsummary,\n    children\n  } = props;\n\n  // Use State to keep the values\n  const [cart, setCart] = useState(initialcart);\n  const isFirstRun = useRef(true);\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    console.log('useEffect');\n    console.log(cart);\n    \n    // On first run, pull cart data from backend\n    if (isFirstRun.current) {\n      console.log('First Run');\n      console.log('Fetching cart data');\n\n      getBackendCart();\n      isFirstRun.current = false;\n      return;\n    }\n    \n    // subsequence runs, just post cart data\n    updateBackendCart(cart);\n  });\n\n  // Calculate summary\n  const summary = useMemo(\n    () => {\n      console.log('Calculate summary')\n      let summary = {\n        subtotal: 0,\n        estimated_total: 0,\n        tax: 5,\n        shipping: 5\n      }\n      var item;\n      for (item of cart) {\n        summary.subtotal += item.quantity * item.price;\n      }\n\n      summary.estimated_total = summary.subtotal + (summary.subtotal * summary.tax/100) + summary.shipping;\n      console.log(summary);\n\n      return summary;\n    },\n    [cart]\n  )\n\n  const addToCart = item => {\n    console.log('Add to cart!');\n    console.log(item);\n    console.log('Current cart');\n    console.log(cart);\n\n    // Check if the item already exist in the cart\n    const cart_array_key = cart.findIndex(x => x.product_id == item.id);\n\n    // Item already exist in cart, just update the quantity\n    if (cart_array_key !== -1) {\n      console.log('Item already exist in cart, update quantity');\n      cart[cart_array_key].quantity += item.quantity;\n      // Below does not work\n      //setCart(cart);\n      setCart(() => [...cart]);\n    } else {\n      console.log('Item does not exist in cart, adding...');\n      const newItem = { product_id: item.id, product_title: item.title, quantity: item.quantity, price: item.price };\n      setCart(cart.concat([newItem]));\n    }\n  };\n\n  const deleteFromCart = item => {\n    console.log('deleteFromCart!');\n    console.log(item);\n    console.log('What is in cart');\n    console.log(cart);\n\n    // Check if the item already exist in the cart\n    const cart_array_key = cart.findIndex(x => x.product_id == item.id);\n\n    // Item already exist in cart, just update the quantity\n    if (cart_array_key !== -1) {\n      console.log('Item found in cart, deleting...');\n      cart[cart_array_key].quantity += item.quantity;\n      cart.splice(cart_array_key, 1);\n      //setCart(cart);\n      setCart(() => [...cart]);\n    }\n  };\n\n  const updateCart = item => {\n    console.log('updateCart!');\n    console.log(item);\n    console.log('What is in cart');\n    console.log(cart);\n\n    // Check if the item already exist in the cart\n    const cart_array_key = cart.findIndex(x => x.product_id == item.id);\n\n    // Item already exist in cart, just update the quantity\n    if (cart_array_key !== -1) {\n      console.log('Item already exist in cart, update quantity');\n      cart[cart_array_key].quantity = item.quantity;\n      //setCart(cart);\n      setCart(() => [...cart]);\n    }\n  };\n\n  const getBackendCart = () => {\n    console.log('getBackendCart');\n    \n    API.get('carts').then((data) => {\n      console.log('Card data from backend');\n      const cart = data.data;\n      console.log(cart);\n      if (cart.length > 0) {\n        setCart(cart);\n      }\n    }, (error) => {\n      console.log(error);\n    });\n  };\n\n  const updateBackendCart = cart => {\n    console.log('updateBackendCart');\n    console.log(cart);\n    console.log('updateBackendCart done');\n\n    API.post('carts', cart).then((cart) => {\n    }, (error) => {\n      console.log(error);\n    });\n  };\n\n  // Make the context object:\n  const cartContext = {\n    cart,\n    setCart,\n    addToCart,\n    updateCart,\n    deleteFromCart,\n    summary\n  };\n\n  // pass the value in provider and return\n  return <Context.Provider value={cartContext}>{children}</Context.Provider>;\n};\n\nexport const { Consumer } = Context;\n\nProvider.propTypes = {\n  cart: PropTypes.array,\n  summary: PropTypes.object\n};\n\nProvider.defaultProps = {\n  cart: [],\n  summary: []\n};","import React from \"react\";\nimport { Dropdown } from 'semantic-ui-react'\n\n// Generate quantity array of objects\nconst quantity = Array.from({length: 10}, (_, i) => i + 1).map(i => {\n    return { key: i, text: i, value: i };\n})\n\nconst QuantityButton = ({value, onChange, item}) => {\n\n  function handleChange(e, data) {\n    console.log('QuantityButton handleChange');\n    console.log(e);\n    console.log(data);\n    onChange(data.value, item);\n  }\n\n  return (\n    <Dropdown\n      placeholder='Select Quantity'\n      selection\n      options={quantity}\n      value={value}\n      onChange={handleChange}\n    />\n  )\n};\n\nexport default QuantityButton","import React, { useState, useContext } from \"react\";\nimport { Card, Icon, Image, Button, Dropdown } from 'semantic-ui-react'\nimport { CartContext } from \"../context\";\nimport QuantityButton from \"./buttons/QuantityButton\"\n\nconst Item = (product) => {\n\n  const { addToCart } = useContext(CartContext);\n  //const { quantity, setQuantity } = useState();\n  //const [quantity, setQuantity] = useState(...);\n  const [quantity, setQuantity] = useState(0);\n\n  //function handleChangeQuantity(value) {\n  //  setQuantity(value);\n  //}\n\n  return (\n    <Card raised style={{ margin: '10px' }}>\n      <Card.Content>\n        <Image src='https://react.semantic-ui.com/images/avatar/small/daniel.jpg' size='large' wrapped ui={false} />\n        <Card.Header>{product.title}</Card.Header>\n        <Card.Description>\n          {product.summary}\n        </Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <QuantityButton \n          value={quantity} \n          onChange={setQuantity}\n        />\n        <div>Price: ${product.price}</div>\n        <Button color='blue'\n          onClick={() => addToCart( {id: product.id, title: product.title, quantity: quantity, price: product.price} )}\n        >\n          Add to Cart\n      </Button>\n      </Card.Content>\n    </Card>\n  )\n};\n\nexport default Item","import React, { useContext } from \"react\";\nimport { Container, Segment, List, Button, Image, Divider } from 'semantic-ui-react'\nimport { CartContext } from \"../context\";\nimport QuantityButton from \"../components/buttons/QuantityButton\"\n\nconst Cart = props => {\n  const { cart, updateCart, deleteFromCart, summary } = useContext(CartContext);\n\n  function handleQuantityChange(new_quantity, item) {\n    console.log('handleQuantityChange');\n    console.log(new_quantity, item);\n    updateCart({ id: item.product_id, title: item.product_title, quantity: new_quantity });\n  }\n\n  return (\n    <Container>\n      <Segment>\n        <h2>Shopping Cart:</h2>\n        {cart.length === 0 ? (\n          <h4>Your cart is empty</h4>\n        ) : (\n            <React.Fragment>\n              <List divided verticalAlign='middle'>\n                {cart.map((item, index) => {\n                  return (\n                    <List.Item key={index}>\n                      <List.Content floated='right'>\n                        <Button\n                          onClick={() => deleteFromCart({ id: item.product_id })}>\n                          Remove\n                        </Button>\n                      </List.Content>\n                      <List.Content floated='right'>Price: {item.price}</List.Content>\n                      <List.Content floated='right'>Quantity:\n                        <QuantityButton\n                          value={item.quantity}\n                          item={item}\n                          onChange={handleQuantityChange}\n                        />\n                      </List.Content>\n                      <Image avatar src='https://react.semantic-ui.com/images/avatar/small/daniel.jpg' />\n                      <List.Content>{item.product_title}</List.Content>\n                    </List.Item>\n                  );\n                })}\n              </List>\n              <Divider />\n              <h4>Summary</h4>\n              <List divided verticalAlign='middle'>\n                <List.Item>\n                  <List.Content>Subtotal</List.Content>\n                  <List.Content floated='right'>${summary.subtotal}</List.Content>\n                </List.Item>\n                <List.Item>\n                  <List.Content floated='left'>Shipping</List.Content>\n                  <List.Content floated='right'>${summary.shipping}</List.Content>\n                </List.Item>\n                <List.Item>\n                  <List.Content floated='left'>Tax</List.Content>\n                  <List.Content floated='right'>{summary.tax}%</List.Content>\n                </List.Item>\n                <List.Item>\n                  <List.Content floated='left'>Estimated Total</List.Content>\n                  <List.Content floated='right'>${summary.estimated_total}</List.Content>\n                </List.Item>\n                <Divider />\n                <Button disabled>Checkout</Button>\n              </List>\n            </React.Fragment>\n          )}\n      </Segment>\n    </Container>\n  );\n};\n\nexport default Cart;\n","\nimport React, { useEffect, useState } from 'react';\nimport API from '../api/api';\nimport Item from '../components/Item';\nimport { Segment, Container } from 'semantic-ui-react'\nimport Cart from '../views/Cart';\n\nconst Home = () => {\n  const [products, setProducts] = useState([]);\n\n  useEffect(() => {\n    API.get('products').then((data) => {\n      console.log('Fetching products');\n      const products = data.data;\n      setProducts(products);\n    }, (error) => {\n      console.log(error);\n    });\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Container>\n        <Segment>\n          <h2>Products: </h2>\n          <div className='home' style={{ display: 'flex', 'flexWrap': 'wrap' }}>\n            {products.map((product, index) => (\n              <Item\n                key={index}\n                id={product.id}\n                title={product.title}\n                summary={product.summary}\n                price={product.price}\n              />\n            ))}\n          </div>\n        </Segment>\n      </Container>\n      <div>\n        <Cart />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Home;","import React from 'react';\n \nconst Error = () => {\n    return (\n       <div>\n          <p>Error: Page does not exist!</p>\n       </div>\n    );\n}\n \nexport default Error;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Home from './views/Home.js';\nimport Error from './views/Error.js';\nimport { CartContextProvider } from \"./context\";\n\nfunction App() {\n  const cart = [];\n\n  return (\n    <Router>\n      <div>\n        <CartContextProvider cart={cart}>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route component={Error} />\n          </Switch>\n        </CartContextProvider>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}